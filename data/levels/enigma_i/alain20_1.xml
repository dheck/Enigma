<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<el:level xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://enigma-game.org/schema/level/1 level.xsd" xmlns:el="http://enigma-game.org/schema/level/1">
  <el:protected>
    <el:info el:type="level">
      <el:identity el:title="Enigmawale" el:subtitle="" el:id="alain20"/>
      <el:version el:score="1" el:release="1" el:revision="0" el:status="released"/>
      <el:author  el:name="Alain Busser" el:email="" el:homepage=""/>
      <el:copyright>Copyright Â© 2006 Alain Busser</el:copyright>
      <el:license el:type="GPL v2.0 or above" el:open="true"/>
      <el:compatibility el:enigma="0.92">
      </el:compatibility>
      <el:modes el:easy="true" el:single="true" el:network="false"/>
      <el:comments>
        <el:code>Lua 5.1 and XML converted by Leveladministrators</el:code>
      </el:comments>
      <el:score el:easy="-" el:difficult="-"/>
    </el:info>
    <el:luamain><![CDATA[
if difficult then -- malagasy version of the game
  levelw = 41
  levelh = 13
else
  levelw = 105
  levelh = 13
end

create_world(levelw, levelh)
oxyd_default_flavor = "a"
display.SetFollowMode(display.FOLLOW_SCROLLING)

if difficult then
  fill_floor("fl-leaves", 0,0, level_width,level_height)
else
  fill_floor("fl-hay",0,0,level_width,level_height)
end

function renderLine( line, pattern)
 if difficult then
  for i=1, strlen(pattern) do
    local c = strsub( pattern, i, i)
    if c =="#" then
      set_stone( "st-glass", i-1, line)
    elseif c=="z" then
      set_actor("ac-blackball",i-0.5,line+0.5,{player=0})
    elseif c=="k" then
      set_stone("st-switch",i-1,line,{action="callback", target="okokok"})
    elseif c=="r" then
      set_stone("st-switch",i-1,line,{action="callback", target="reset"})
    elseif c=="a" then
      document(i-1,line,"text9")
    elseif c=="b" then
      document(i-1,line,"text10")
    elseif c=="c" then
      document(i-1,line,"text11")
    elseif c=="d" then
      document(i-1,line,"text12")
    elseif c==";" then
      document(i-1,line,"text13")
    elseif c=="e" then
      document(i-1,line,"text14")
    elseif c=="f" then
      document(i-1,line,"text15")
    elseif c=="g" then
      document(i-1,line,"text16")
    elseif c=="h" then
      document(i-1,line,"text17")
    elseif c=="*" then
      set_stone("st-stone2",i-1,line)
    elseif c=="-" then
      doorh(i-1,line,{name="sesame"})
    elseif c=="1" then
      set_stone("st-switch",i-1,line,{action="callback", target="switch1"})
    elseif c=="2" then
      set_stone("st-switch",i-1,line,{action="callback", target="switch2"})
    elseif c=="3" then
      set_stone("st-switch",i-1,line,{action="callback", target="switch3"})
    elseif c=="4" then
      set_stone("st-switch",i-1,line,{action="callback", target="switch4"})
    elseif c=="5" then
      set_stone("st-switch",i-1,line,{action="callback", target="switch5"})
    elseif c=="6" then
      set_stone("st-switch",i-1,line,{action="callback", target="switch6"})
    elseif c=="0" then
      set_floor("fl-dunes",i-1,line)
    elseif c=="M" then
      set_floor("fl-hay",i-1,line)
    elseif c=="o" then
      oxyd(i-1,line)
    end
  end
 else
  for i=1, strlen(pattern) do
    local c = strsub( pattern, i, i)
    if c =="#" then
      set_stone( "st-glass1", i-1, line)
    elseif c=="D" then
      set_floor("fl-leaves",i-1,line)
      set_stone("st-glass1",i-1,line)
    elseif c=="z" then
      set_actor("ac-blackball",i-0.5,line+0.5,{player=0})
    elseif c=="k" then
      set_stone("st-switch",i-1,line,{action="callback", target="okokok"})
    elseif c=="r" then
      set_stone("st-switch",i-1,line,{action="callback", target="reset"})
    elseif c=="a" then
      document(i-1,line,"text1")
    elseif c=="b" then
      document(i-1,line,"text2")
    elseif c=="c" then
      document(i-1,line,"text3")
    elseif c=="d" then
      document(i-1,line,"text4")
    elseif c==";" then
      document(i-1,line,"text5")
    elseif c=="e" then
      document(i-1,line,"text6")
    elseif c=="*" then
      set_stone("st-stone2",i-1,line)
    elseif c=="-" then
      doorh(i-1,line,{name="sesame"})
    elseif c=="1" then
      set_stone("st-switch",i-1,line,{action="callback", target="switch1"})
    elseif c=="2" then
      set_stone("st-switch",i-1,line,{action="callback", target="switch2"})
    elseif c=="3" then
      set_stone("st-switch",i-1,line,{action="callback", target="switch3"})
    elseif c=="4" then
      set_stone("st-switch",i-1,line,{action="callback", target="switch4"})
    elseif c=="5" then
      set_stone("st-switch",i-1,line,{action="callback", target="switch5"})
    elseif c=="6" then
      set_stone("st-switch",i-1,line,{action="callback", target="switch6"})
    elseif c=="7" then
      set_stone("st-switch",i-1,line,{action="callback", target="switch7"})
    elseif c=="0" then
      set_floor("fl-dunes",i-1,line)
    elseif c=="+" then
      oxyd(i-1,line)
    end
  end
 end	
end

-- choosing a row -- -- -- -- -- -- -- -- -- -- -- -- -- --

function switch1()
  my_choice=1
  display_choice()
end

function switch2()
  my_choice=2
  display_choice()
end

function switch3()
  my_choice=3
  display_choice()
end

function switch4()
  my_choice=4
  display_choice()
end

function switch5()
  my_choice=5
  display_choice()
end

function switch6()
  my_choice=6
  display_choice()
end


-- display functions -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

function display_game()
 if difficult then
-- -- -- -- -- -- -- -- -- -- --  display Blackball's stones
	for i=1,6 do
		for j=1,8 do
			enigma.KillStone(j,i)
			enigma.KillStone(9+j,i)
			enigma.KillStone(22+j,i)
			enigma.KillStone(31+j,i)
		end
	end
	for i=1,6 do
		som_1=tab1[i]
		s_10=0
		if som_1>=10 then
			repeat
				s_10=s_10+1
				som_1=som_1-10
			until som_1<10
		end
		if som_1<5 then
			s_5=0
		else
			s_5=1
			som_1=som_1-5
		end
		s_1=som_1
		if s_10>0 then for j=1,s_10 do set_stone("st-yellow",j,i) end end
		if s_5>0 then for j=s_10+1,s_10+s_5 do set_stone("st-rock5",j,i) end end
		if s_1>0 then for j=s_10+s_5+1,s_10+s_5+s_1 do set_stone("st-blue-sand",j,i) end end
		if ghost[i]>=0 then
			for j=s_10+s_5+s_1+1,s_10+s_5+s_1+ghost[i] do
				set_stone("st-glass",j,i)
			end
		end
	end
	for i=1,6 do
		som_1=tab1[6+i]
		s_10=0
		if som_1>=10 then
			repeat
				s_10=s_10+1
				som_1=som_1-10				
			until som_1 < 10
		end
		if som_1<5 then
			s_5=0
		else
			s_5=1
			som_1=som_1-5
		end
		s_1=som_1
		if s_10>0 then for j=1,s_10 do set_stone("st-yellow",9+j,7-i) end end
		if s_5>0 then for j=s_10+1,s_10+s_5 do set_stone("st-rock5",9+j,7-i) end end
		if s_1>0 then for j=s_10+s_5+1,s_10+s_5+s_1 do set_stone("st-blue-sand",9+j,7-i) end end
		if ghost[6+i]>=0 then
			for j=s_10+s_5+s_1+1,s_10+s_5+s_1+ghost[6+i] do
				set_stone("st-glass",9+j,7-i)
			end
		end
	end
-- -- -- -- -- -- -- -- -- -- -- -- -- --       display Big Brother's stones
	for i=1,6 do
		som_2=tab2[i]
		s_10=0
		if som_2>=10 then
			repeat
				s_10=s_10+1
				som_2=som_2-10
			until som_2 < 10
		end
		if som_2<5 then
			s_5=0
		else
			s_5=1
			som_2=som_2-5
		end
		s_1=som_2
		if s_10>0 then for j=1,s_10 do set_stone("st-yellow",31+j,7-i) end end
		if s_5>0 then for j=s_10+1,s_10+s_5 do set_stone("st-rock5",31+j,7-i) end end
		if s_1>0 then for j=s_10+s_5+1,s_10+s_5+s_1 do set_stone("st-blue-sand",31+j,7-i) end end
	end
	for i=1,6 do
		som_2=tab2[6+i]
		s_10=0
		if som_2>=10 then
			repeat
				s_10=s_10+1
				som_2=som_2-10
			until som_2 < 10
		end
		if som_2<5 then
			s_5=0
		else
			s_5=1
			som_2=som_2-5
		end
		s_1=som_2
		if s_10>0 then for j=1,s_10 do set_stone("st-yellow",22+j,i) end end
		if s_5>0 then for j=s_10+1,s_10+s_5 do set_stone("st-rock5",22+j,i) end end
		if s_1>0 then for j=s_10+s_5+1,s_10+s_5+s_1 do set_stone("st-blue-sand",22+j,i) end end
	end
 else
	for i=1,6 do
		for j=1,48 do
			enigma.KillStone(50-j,i)
			enigma.KillStone(54+j,7-i)
		end
		num=tab[i]
		if num>=0 then
			for j=1,num do
				set_stone("st-rock3",50-j,i)
			end
		end
		if ghost[i]>=0 then
			for j=1,ghost[i] do
				set_stone("st-glass",50-num-j,i)
			end
		end
		num=tab[i+6]
		if num>=0 then
			for j=1,num do
				set_stone("st-rock3",54+j,7-i)
			end
		end
		if ghost[i+6]>=0 then
			for j=1,ghost[i+6] do
				set_stone("st-glass",54+num+j,7-i)
			end
		end
	end
	for i=1,48 do
		enigma.KillStone(50-i,10)
		enigma.KillStone(54+i,10)
	end
	if gain1>0 then
		for i=1,gain1 do
			set_stone("st-rock3",50-i,10)
		end
	end
	if gain2>0 then
		for i=1,gain2 do
			set_stone("st-rock3",54+i,10)
		end
	end
 end
end

function display_choice()
 if difficult then
 	for i=1,6 do
		set_floor("fl-leaves",0,i)
		set_floor("fl-leaves",9,i)
		set_floor("fl-leaves",18,i)
		set_floor("fl-leaves",22,i)
	end
	set_floor("fl-water",0,my_choice)
	set_floor("fl-water",9,my_choice)
	set_floor("fl-water",18,my_choice)
	set_floor("fl-red",22,7-BB_choice)
	td1=0
	for i=1,12 do
		ghost[i]=0
	end
	for i=1,6 do td1=td1+tab1[i] end
	if td1>0 then
		som3=tab1[my_choice]
		j=my_choice
		for i=1,som3 do
			j=j+1
			if j==13 then j=1 end
			ghost[j]=ghost[j]+1
		end
	else
		som3=tab1[13-my_choice]
		j=13-my_choice
		for i=1,som3 do
			j=j+1
			if j==13 then j=1 end
			ghost[j]=ghost[j]+1
		end
	end
	display_game()
else
	for i=1,6 do
		set_floor("fl-hay",50,i)
		set_floor("fl-hay",54,7-i)
	end
	for i=1,12 do
		ghost[i]=0
	end
	som3=tab[my_choice]
	j=my_choice
	for i=1,som3 do
		j=j+1
		if j==13 then j=1 end
		ghost[j]=ghost[j]+1
	end
	display_game()
	set_floor("fl-water",50,my_choice)
	set_floor("fl-red",54,13-BB_choice)
 end
end

-- sowing the stones -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

function okokok()
 if difficult then -- katro version (Madagasikara)
	t1=0
	for i=1,12 do t1=t1+tab1[i] end
	t2=0
	for i=1,12 do t2=t2+tab2[i] end
	if t1>0 or t2>0 then
		test1=0
		for i=1,6 do test1=test1+tab1[i] end
		if test1>0 and tab1[my_choice]==0 then unable=1 else unable=0 end
	if unable==0 then
		if test1>0 then
			sow1(my_choice)
		else
		 if t1>1 then
			sow1(13-my_choice)
		 else
			los=1
		 end
		end
		test2=0
		for i=1,6 do test2=test2+tab2[i] end
		if test2>0 then
			BB_choice=7
			score=0
			to_choose=0
			for n=1,6 do
				BB_choice=BB_choice-1
				gsum=tab2[BB_choice]
				jj=BB_choice
				if gsum>0 then
					repeat
						jj=jj+1
						if jj==13 then jj=1 end
						if gsum>1 then gsum=gsum-1 end
					until gsum <= 1
					if score<tab1[jj] then score=tab1[jj] to_choose=BB_choice end
				end
			end
			if score>0 then
				BB_choice=to_choose
			else
				repeat
					r=random(6)					
				until tab2[r] ~= 0
				BB_choice=r
			end
			sow2(BB_choice)
		else
		 if t2>1 then
			BB_choice=6
			score=0
			to_choose=0
			for n=1,6 do
				BB_choice=BB_choice+1
				gsum=tab2[BB_choice]
				jj=BB_choice
				if gsum>0 then
					repeat
						jj=jj+1
						if jj==13 then jj=1 end
						if gsum>0 then gsum=gsum-1 end
					until gsum <= 0
					if score<tab1[jj] then score=tab1[jj] to_choose=BB_choice end
				end
			end
			if score>0 then
				BB_choice=to_choose
			elseif test2>0 then
				repeat
					r=random(6)
				until tab2[6+r]~=0
				BB_choice=13-r
			end
			sow2(BB_choice)
		 else
			won=1
		 end
		end
	end
	elseif t1<=1 then
			los=1
	elseif t2<=1 then
			won=1
	end
	display_game()
	display_choice()
	if won==1 then
		SendMessage("sesame","open")
	end
	if los==1 then
		document(20,10,"text18")
	end
 else -- -- -- -- -- -- -- -- -- -- -- -- -- -- awale version
	my_goods=0
	for i=1,6 do my_goods=my_goods+tab[i] end
	if my_goods==0 then
		document(52,9,"text7")
		SendMessage("sesame","open")
	end
	som=tab[my_choice]
	if som>0 then
		tab[my_choice]=0
		j=my_choice
		for i=1,som do
			j=j+1
			if j==13 then j=1 end
			tab[j]=tab[j]+1
		end
		take1(j)
		BB_goods=0
		for i=7,12 do BB_goods=BB_goods+tab[i] end
		if BB_goods==0 then hurra1=0 end
		display_choice()
		if hurra1==1 then
			repeat -- Now Big Brother enters in action -- -- -- -- -- -- -- -- -- --
				BB_choice=random(6)+6
				som=tab[BB_choice]
			until som ~= 0
		else
			bouh=1
		end
		for i=7,12 do -- Big Brother tries to avoid a danger -- -- -- -- -- -- -- -- --
			if tab[i]==1 or tab[i]==2 then
				for j=1,6 do
					if tab[i]==j-i then
						BB_choice=i
					end
				end
			end
		end
		for i=1,6 do -- but Big Brother prefers to attack than defend himself -- -- -- --
			if tab[i]==1 or tab[i]==2 then
				for j=7,12 do
					if tab[j]==12+i-j then
						BB_choice=j
					end
				end
			end
		end
		som=tab[BB_choice]
		tab[BB_choice]=0
		j=BB_choice
		for i=1,som do
			j=j+1
			if j==13 then j=1 end
			tab[j]=tab[j]+1
		end
		take2(j)
		display_game()
		dammit0=0
		for i=1,6 do
			if tab[i]>0 then dammit0=1 end
		end
		if dammit1==0 or gain1>=24 then
			won=1
		end
		dammit1=dammit0
		if won==1 then
			document(52,9,"text7")
			SendMessage("sesame","open")
		end
		hurra0=0
		for i=1,6 do
			if tab[6+i]>0 then hurra0=1 end
		end
		if gain2>=24 then
			bouh=1
		end
		hurra1=hurra0
		if bouh==1 then
			document(52,9,"text8")
		end
	end
 end
end

function take2(case)
	if case<7 then
		compt1=tab[case]
		if compt1==2 or compt1==3 then
			gain2=gain2+compt1
			tab[case]=0
			if case>1 then
				take2(case-1)
			end
		end
	end
end

function take1(case)
	if case>6 then
		compt2=tab[case]
		if compt2==2 or compt2==3 then
			gain1=gain1+compt2
			tab[case]=0
			if case>7 then
				take1(case-1)
			end
		end
	end
end


function sow1(case)-- Blackball sows with sorrow
	error1=0
	if tab1[case]>0 and los==0 then
		compt1=tab1[case]
		tab1[case]=0
		j=case
		repeat
			j=j+1
			if j==13 then j=1 end
			tab1[j]=tab1[j]+1
			compt1=compt1-1			
		until compt1 <= 0
	else
		error1=1
	end
	if error1==0 and tab1[j]>1 then
		sow_take1(j)
	end
end

function sow_take1(case)-- sow and take
	error1=0
	if tab1[case]>0 and los==0 then
		compt1=tab1[case]
		tab1[case]=0
		if case>6 then -- the only way to take stones
		empty2=0
		for i=1,6 do empty2=empty2+tab2[i+6] end
		  if empty2>0 then
			compt1=compt1+tab2[19-case]
			tab2[19-case]=0
		  else
			compt1=compt1+tab2[13-case]
			tab2[13-case]=0
		  end
		end
		j=case
		repeat
			j=j+1
			if j==13 then j=1 end
			tab1[j]=tab1[j]+1
			compt1=compt1-1
		until compt1 <= 0
	else
		error1=1
	end
	if error1==0 and tab1[j]>1 then
		sow_take1(j)
	end
end

function sow2(case)
	if tab2[case]>0 and won==0 then
		compt2=tab2[case]
		tab2[case]=0
		j=case
		repeat
			j=j+1
			if j==13 then j=1 end
			tab2[j]=tab2[j]+1
			compt2=compt2-1
		until compt2 <= 0
		if tab2[j]>1 and won==0 then
			sow_take2(j)
		end
	end
end

function sow_take2(case)
	if tab2[case]>0 and won==0 then
		compt2=tab2[case]
		tab2[case]=0
		if case>6 then
		empty1=0
		for i=1,6 do empty1=empty1+tab1[i+6] end
		  if empty1>0 then
			compt2=compt2+tab1[19-case]
			tab1[19-case]=0
		  else
			compt2=compt2+tab1[13-case]
			tab1[13-case]=0
		  end
		end
		j=case
		repeat
			j=j+1
			if j==13 then j=1 end
			tab2[j]=tab2[j]+1
			compt2=compt2-1
		until compt2 <= 0
		if tab2[j]>1 and won==0 then
			sow_take2(j)
		end
	end
end


function reset()
	gain1=0
	gain2=0
	dammit1=1
	hurra1=1
	won=0
	bouh=0
	for i=1,12 do
		tab[i]=4
		tab1[i]=2
		tab2[i]=2
		ghost[i]=0
	end
	display_game()
	my_choice=random(6)
	if difficult then BB_choice=random(6) else BB_choice=6+random(6) end
	won=0
	los=0
end

if difficult then

 --               0123456789012345678901234567890123456789012
 renderLine(00 , "###################   ###################")
 renderLine(01 , "#00000000#00000000#1  #00000000#00000000#")
 renderLine(02 , "#0M000M00#00MMM000#2  #0MMMM000#00MMM000#")
 renderLine(03 , "#0MM0MM00#0M000M00#3  #0M000M00#0M000M00#")
 renderLine(04 , "#0M0M0M00#0MMMMM00#4  #0M000M00#0MMMMM00#")
 renderLine(05 , "#0M000M00#0M000M00#5  #0M000M00#0M000M00#")
 renderLine(06 , "#0M000M00#0M000M00#6  #0MMMM000#0M000M00#")
 renderLine(07 , "###################   ###################")
 renderLine(08 , "                    z h                  ")
 renderLine(09 , "        g          c d          f        ")
 renderLine(10 , "                   ; e                   ")
 renderLine(11 , "      **************-**************      ")
 renderLine(12 , "ka    *o                         o*    br")
--               01234567890123456789012345678901234567890123
else

 --               012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234
 renderLine(00 , "r##################################################   ################################################## ")
 renderLine(01 , " #   000    00000   0000      0    000     000    #1  #    000    0   0    000    0       00000   0    # ")
 renderLine(02 , "b#  0   0   0       0   0     0   0   0   0   0   #2  #   0   0   0   0   0   0   0       0       0    # ")
 renderLine(03 , " #  0   0   0       0   0     0   0       0   0   #3  #   0   0   0   0   0   0   0       000     0    # ")
 renderLine(04 , " #  00000   0000    0000      0   0       00000   #4  #   00000   0   0   00000   0       0       0    # ")
 renderLine(05 , " #  0   0   0       0   0     0   0   0   0   0   #5  #   0   0   0 0 0   0   0   0       0            # ")
 renderLine(06 , " #  0   0   0       0   0     0    000    0   0   #6  #   0   0    0 0    0   0   00000   00000   0    # ")
 renderLine(07 , " ##################################################   ################################################## ")
 renderLine(08 , "                                                 c d ; e                                                 ")
 renderLine(09 , " #########D#########D#########D#########D########## z ##########D#########D#########D#########D######### ")
 renderLine(10 , " #                                                #a k#                                                # ")
 renderLine(11 , "****************************************************-****************************************************")
 renderLine(12 , "                                           +                 +                                           ")
 --               012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678

end
tab={}
tab1={}
tab2={}
ghost={}
reset()
oxyd_shuffle()
    ]]></el:luamain>
    <el:i18n>
      <el:string el:key="title">
        <el:english el:translate="false"/>
      </el:string>
      <el:string el:key="text1">
        <el:english el:translate="true">The witch of this switch waits for your wish.</el:english>
      </el:string> 
      <el:string el:key="text2">
        <el:english el:translate="true">The witch of this switch resets the awale game.</el:english>
      </el:string> 
      <el:string el:key="text3">
        <el:english el:translate="true">A turn consists in taking the walnuts of a row behind the windowy walls and sowing them 1 by 1 in the following rows.</el:english>
      </el:string> 
      <el:string el:key="text4">
        <el:english el:translate="true">Warning: What awaits the wailing warrior at the end of a turn? If there are 2 or 3 walnuts in a row, they are a warm award for the warrior, as are the walnuts in the rows which are in the way to this row, if they are 2 or 3 per row.</el:english>
      </el:string> 
      <el:string el:key="text5">
        <el:english el:translate="true">Warning: If one warrior's walls are empty, this awesome warrior wins.</el:english>
      </el:string> 
      <el:string el:key="text6">
        <el:english el:translate="true">When a warrior has awarded more than half the walnuts, he wins. What does he win? The way to the waiting oxyds he wants.</el:english>
      </el:string> 
      <el:string el:key="text7">
        <el:english el:translate="true">Congratulations! You are the most aware awale player of the valley ...</el:english>
      </el:string> 
      <el:string el:key="text8">
        <el:english el:translate="true">Lost in the savannah? Don't wait and walk on the way to the reset switch on the far left ...</el:english>
      </el:string> 
      <el:string el:key="text9">
        <el:english el:translate="true">Validate your choice here.</el:english>
      </el:string> 
      <el:string el:key="text10">
        <el:english el:translate="true">Reset the game.</el:english>
      </el:string> 
      <el:string el:key="text11">
        <el:english el:translate="true">A turn consists in taking the stones of a row and sowing them 1 by 1 in one's other rows, counterclockwise, coming back to the beginning.</el:english>
      </el:string> 
      <el:string el:key="text12">
        <el:english el:translate="true">At the end of a turn, if the last stone falls in a nonempty row, one takes the stones of the facing row if there is any, and repeats a turn.</el:english>
      </el:string> 
      <el:string el:key="text13">
        <el:english el:translate="true">A turn begins in one of the most left rows, unless impossible.</el:english>
      </el:string> 
      <el:string el:key="text14">
        <el:english el:translate="true">At the end of the game (if one player cannot move anymore), the player who has the most stones wins.</el:english>
      </el:string> 
      <el:string el:key="text15">
        <el:english el:translate="true">A yellow stone stands for 10 blue stones (then for 2 brown stones).</el:english>
      </el:string> 
      <el:string el:key="text16">
        <el:english el:translate="true">A brown stone stands for 5 blue stones.</el:english>
      </el:string> 
      <el:string el:key="text17">
        <el:english el:translate="true">This katro game comes from Madagascar; in Easy mode there is an african Awale.</el:english>
      </el:string> 
      <el:string el:key="text18">
        <el:english el:translate="true">Only reset or shift+F3 can make things evolve...</el:english>
      </el:string> 
    </el:i18n>
  </el:protected>
</el:level>

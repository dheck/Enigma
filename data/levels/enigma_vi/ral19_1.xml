<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<el:level xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://enigma-game.org/schema/level/1 level.xsd" xmlns:el="http://enigma-game.org/schema/level/1">
  <el:protected >
    <el:info el:type="level">
      <el:identity el:title="Polar Bears' Paradise" el:subtitle="Witch Hunt on Ice" el:id="20070314ral394"/>
      <el:version el:score="1" el:release="1" el:revision="$Revision: 68 $" el:status="released"/>
      <el:author  el:name="Ronald Lamprecht" el:email="ral@users.berlios.de"/>
      <el:copyright>Copyright © 2006 Ronald Lamprecht</el:copyright>
      <el:license el:type="GPL v2.0 or above" el:open="true"/>
      <el:compatibility el:enigma="1.00">
        <el:dependency el:path="lib/andreas_itemfreeze" el:id="lib/andreas_itemfreeze" el:release="1" el:preload="true"/>
      </el:compatibility>
      <el:modes el:easy="true" el:single="true" el:network="false"/>
      <el:comments>
        <el:credits el:showinfo="true" el:showstart="false">Thanks to Nat Pryce for his libs and code examples</el:credits>
        <el:code>Lua 5.1</el:code>
      </el:comments>
      <el:score el:easy="17:17" el:difficult="25:34"/>
    </el:info>
    <el:luamain><![CDATA[
enigma.ConserveLevel = TRUE
math_floor = floor

set_oxyd = oxyd

function oxyd( x, y, tiles )
    return set_oxyd( x, y )
end

function nothing(x, y, tiles)
    -- create nothing
end

function horizontal_bolder(x,y,tiles)
    if random() >= 0.5 then
        return set_stone( "st-bolder-w", x, y )
    else
        return set_stone( "st-bolder-e", x, y )
    end
end

function vertical_bolder(x,y,tiles)
    if random() >= 0.5 then
        return set_stone( "st-bolder-n", x, y )
    else
        return set_stone( "st-bolder-s", x, y )
    end
end

function checkerboard_floor( type1, type2, attribs1, attribs2 )
    return function( x, y, tiles )
        if mod(x,2) == mod(y,2) then
            return set_floor( type1, x, y, attribs1 or {} )
        else
            return set_floor( type2, x, y, attribs2 or {} )
        end
    end
end

function floor( floor_type, attribs )
    return function( x, y, tiles )
        return set_floor( floor_type, x, y, attribs or {} )
    end
end

function stone( stone_type, attribs )
    return function( x, y, tiles )
        return set_stone( stone_type, x, y, attribs or {} )
    end
end

function item( item_type, attribs )
    return function( x, y, tiles )
        return set_item( item_type, x, y, attribs or {} )
    end
end

function actor( actor_type, attribs )
    return function( x, y, tiles )
        if (actor_type == "ac-whiteball-small") then
            return set_actor( actor_type, x+0.5, y, attribs or {} )
        else
            return set_actor( actor_type, x+0.5, y+0.5, attribs or {} )
        end
    end
end

function gradient( gradient_type )
    return function( x, y, tiles )
        return set_floor( "fl-gradient", x, y, {type=gradient_type} )
    end
end

function inherit(tile_type)
    return function( x, y, tiles )
        return create_tile( tiles, x, y, tile_type )
    end
end

function group( array, constructor )
    return function( x, y, tiles )
        object = constructor( x, y, tiles )
        tinsert( array, object )
        return object
    end
end

function difficulty( d, constructor )
    if options.Difficulty == d then
        return constructor
    else
        return nothing
    end
end

function create_world_from_map( tiles, map )
    create_world( strlen(map[1]), getn(map) )

    for y = 1,getn(map) do
        local line = map[y]
        for x = 1,strlen(line) do
            local tile = strchar(strbyte(line,x))
            create_tile( tiles, x-1, y-1, tile )
        end
    end
end

function create_tile( tiles, x, y, tile_type )
    local constructors = tiles[tile_type]

    if constructors then
    for i = 1,getn(constructors) do
        constructors[i](x,y,tiles)
    end
    else
    error("invalid tile identifier " .. tile_type )
    end
end

oxyd_default_flavor = "a"

tiles = {}
tiles[" "] = {floor("fl-water")}
tiles["."] = {floor("fl-ice")}
tiles["#"] = {inherit(" "), stone("st-glass")}
tiles["s"] = {inherit(" "), item("it-seed")}
if difficult then
    tiles["p"] = tiles["."]
else
    tiles["p"] = {inherit("."), item("it-pin")}
end
tiles["x"] = {inherit(" "), oxyd}
tiles["v"] = {inherit("."), item("it-wormhole", {targetx=3.5, targety=9.5, strength=1, range=1})}
tiles["w"] = {inherit("."), item("it-wormhole", {targetx=16.5, targety=3.5, strength=1, range=1})}

tiles["yb"] = {inherit("."), item("it-yinyang")}
tiles["yw"] = {inherit("."), item("it-yinyang")}

tiles["1"] = {inherit("yb"), actor("ac-whiteball", {essential=1, player=0, controllers=1})}
tiles["2"] = {inherit("yw"), actor("ac-whiteball", {essential=1})}
tiles["3"] = {inherit("."), actor("ac-whiteball-small", {essential=1, player=nil, controllers=0})}


create_world_from_map( tiles, {
"#############x####x#",
"#v..p..            x",
"#.1...    s     .. #",
"#....       s   33 #",
"#...   s           #",
"#              s   #",
"#    s             x",
"x            s     #",
"#     s         ...#",
"# ..       s   ....#",
"# 33    s     ...2.#",
"x            .....w#",
"#x####x#############"
})

itemfreeze_test_for_existence = 1
set_itemfreeze(16, 9)
itemfreeze_option = 1
itemfreeze_init(0, 0, 0.01)

oxyd_shuffle()
    ]]></el:luamain>
    <el:i18n>
      <el:string el:key="title">
        <el:english el:translate="true"/>
        <el:translation el:lang="de">Eisbärenparadies</el:translation>
      </el:string>
      <el:string el:key="subtitle">
        <el:english el:translate="true"/>
        <el:translation el:lang="de">Treibjagd auf Eis</el:translation>
      </el:string>
    </el:i18n>
  </el:protected>
</el:level>


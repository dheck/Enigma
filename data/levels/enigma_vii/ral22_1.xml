<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<el:level xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://enigma-game.org/schema/level/1 level.xsd" xmlns:el="http://enigma-game.org/schema/level/1">
  <el:protected >
    <el:info el:type="level">
      <el:identity el:title="Maze for Two" el:subtitle="Keep distance!" el:id="20071017ral096"/>
      <el:version el:score="1" el:release="1" el:revision="$Revision: 84 $" el:status="released"/>
      <el:author  el:name="Ronald Lamprecht" el:email="ral@users.berlios.de"/>
      <el:copyright>Copyright Â© 2007 Ronald Lamprecht</el:copyright>
      <el:license el:type="GPL v2.0 or above" el:open="true"/>
      <el:compatibility el:enigma="1.00">
        <el:dependency el:path="lib/natmaze" el:id="lib/natmaze" el:release="1" el:preload="true"/>
      </el:compatibility>
      <el:modes el:easy="true" el:single="true" el:network="false"/>
      <el:comments>
      </el:comments>
      <el:score el:easy="5:33" el:difficult="8:08"/>
    </el:info>
    <el:luamain><![CDATA[
enigma.ConserveLevel = FALSE
oxyd_flavor = "d"

math_floor = floor

set_oxyd = oxyd

function oxyd( x, y, tiles )
    return set_oxyd( x, y, oxyd_flavor)
end

function nothing(x, y, tiles)
    -- create nothing
end

function checkerboard_floor( type1, type2, attribs1, attribs2 )
    return function( x, y, tiles )
        if mod(x,2) == mod(y,2) then
            return set_floor( type1, x, y, attribs1 or {} )
        else
            return set_floor( type2, x, y, attribs2 or {} )
        end
    end
end

function floor( floor_type, attribs )
    return function( x, y, tiles )
        return set_floor( floor_type, x, y, attribs or {} )
    end
end

function stone( stone_type, attribs )
    return function( x, y, tiles )
        return set_stone( stone_type, x, y, attribs or {} )
    end
end

function item( item_type, attribs )
    return function( x, y, tiles )
        return set_item( item_type, x, y, attribs or {} )
    end
end

function actor( actor_type, attribs )
    return function( x, y, tiles )
        return set_actor( actor_type, x+0.5, y+0.5, attribs or {} )
    end
end

function actor0(actor_type, attribs )
    return function( x, y, tiles )
        return set_actor( actor_type, x, y, attribs or {} )
    end
end

function gradient( gradient_type )
    return function( x, y, tiles )
        return set_floor( "fl-gradient", x, y, {type=gradient_type} )
    end
end

function inherit(tile_type)
    return function( x, y, tiles )
        return create_tile( tiles, x, y, tile_type )
    end
end

function group( array, constructor )
    return function( x, y, tiles )
        object = constructor( x, y, tiles )
        tinsert( array, object )
        return object
    end
end

function create_world_from_map( tiles, map )
    create_world( strlen(map[1]), getn(map) )

    for y = 1,getn(map) do
        local line = map[y]
        for x = 1, strlen(line) do
            local tile = strchar(strbyte(line,x))
            create_tile( tiles, x-1, y-1, tile )
        end
    end
end

function create_tile( tiles, x, y, tile_type )
    local constructors = tiles[tile_type]

    if constructors then
        for i = 1,getn(constructors) do
            constructors[i](x,y,tiles)
        end
    else
        error("invalid tile identifier '" .. tile_type .. "' at (" .. x .. "," .. y .. ")")
    end
end

tiles = {}
tiles[" "] = {floor("fl-wood")}
tiles["~"] = {floor("fl-water")}
tiles["#"] = {inherit(" "), stone("st-marble")}
tiles["y"] = {inherit(" "), item("it-yinyang")}
tiles["x"] = {inherit(" "), oxyd}
tiles["1"] = {inherit("y"), actor("ac-blackball", {player=0, controllers=3, essential=-1})}
tiles["2"] = {inherit("y"), actor("ac-whiteball", {player=1, controllers=3, essential=-1})}
tiles["maze_wall"] = {floor("fl-water")}
tiles["maze_wall_white"] = {inherit(" "), stone("st-black1")}
tiles["maze_wall_black"] = {inherit(" "), stone("st-white1")}
if difficult then
    tiles["d"] = tiles[" "]
    tiles["D"] = {inherit(" "), item("it-document",{text="forest"})}
    tiles["w"] = tiles[" "]
    tiles["b"] = tiles[" "]
    tiles["W"] = {inherit(" "), stone("st-white4")}
    tiles["B"] = {inherit(" "), stone("st-black4")}
else
    tiles["d"] = {inherit(" "), item("it-document",{text="forest"})}
    tiles["D"] = tiles[" "]
    tiles["w"] = {inherit(" "), stone("st-white4")}
    tiles["b"] = {inherit(" "), stone("st-black4")}
    tiles["W"] = tiles[" "]
    tiles["B"] = tiles[" "]
end

create_world_from_map( tiles, {
"#x#############x#############x#########",
"#                                     #",
"#                                     #",
"#                             w   W   #",
"#    B   b         B   b         B   b#",
"#                                     #",
"#                                     #",
"#          d                          x",
"#                                     #",
"x                                     #",
"#                                     #",
"#                             w   W   #",
"#                                     #",
"#   B   b        D                    #",
"#                                     #",
"#                                     x",
"#                                     #",
"x                                     #",
"#                                     #",
"#                                     #",
"#w   W         w   W         w   W    #",
"#   B   b                             #",
"#                                     #",
"#                                     #",
"#########x#############x#############x#",
})

ox = 8
oy = 4
threshold = 0.0
abx = 7
aby = 5
threshold_border = 0.17

if difficult then
    ox = 4
    oy = 4
    threshold = 0.4
    abx = 15
    aby = 11
    threshold_border = 0.17
end

create_tile(tiles, abx, aby, "1")
create_tile(tiles, abx + ox, aby + oy, "2")

fill_floor("fl-water", 1, 2*12 - oy, ox, oy)
fill_floor("fl-water", 2*19 - ox, 1, ox, oy)

function render_dual_maze()
    local perfect_maze = new_kruskal_maze(19 - ox/2, 12 - oy/2)
    render_maze(perfect_maze,
            function(maze, cellx, celly)
                local xb = 1 + cellx*2
                local yb = 1 + celly*2
                local xw = 1+ox + cellx*2
                local yw = 1+oy + celly*2

                if not maze:can_go_east(cellx,celly) and maze:contains_cell(cellx+1,celly) then
                    create_tile(tiles, xw+1, yw, "maze_wall")
                    if ((xb > ox and yb > oy) and
                            enigma.GetKind(enigma.GetFloor(xb+1, yb)) == "fl-wood") then
                        if (not difficult or math.random() > threshold) then
                            create_tile(tiles, xb+1, yb, "maze_wall_black")
                        else
                            enigma.SetAttrib(enigma.GetFloor(xw+1, yw), "_white_shortcut_forbidden", "true")
                        end
                    else
                        create_tile(tiles, xb+1, yb, "maze_wall")
                    end
                end

                if maze:can_go_east(cellx,celly) and maze:contains_cell(cellx+1,celly) then
                    if ((xb > ox and yb > oy) and
                            enigma.GetKind(enigma.GetFloor(xb+1, yb)) == "fl-water") then
                        if ( enigma.GetAttrib(enigma.GetFloor(xb+1, yb), "_white_shortcut_forbidden")
                                or (not difficult) or (math.random() > threshold)) then
                            create_tile(tiles, xb+1, yb, "maze_wall_white")
                        else
                            create_tile(tiles, xb+1, yb, " ")
                        end
                    end
                    if ((xb <= ox or yb <= oy) and (math.random() < threshold_border)) then
                        create_tile(tiles, xb+1, yb, "maze_wall_white")
                    end
                    if ((xw >= 38 - ox or yw >= 24 - oy) and (math.random() < threshold_border)) then
                        create_tile(tiles, xw+1, yw, "maze_wall_black")
                    end
                end

                if not maze:can_go_south(cellx,celly) and maze:contains_cell(cellx,celly+1) then
                    create_tile(tiles, xw, yw+1, "maze_wall")
                    if ((xb > ox and yb > oy) and
                            enigma.GetKind(enigma.GetFloor(xb, yb+1)) == "fl-wood") then
                        if (not difficult or math.random() > threshold) then
                            create_tile(tiles, xb, yb+1, "maze_wall_black")
                        else
                            enigma.SetAttrib(enigma.GetFloor(xw, yw+1), "_white_shortcut_forbidden", "true")
                        end
                    else
                        create_tile(tiles, xb, yb+1, "maze_wall")
                    end
                end

                if maze:can_go_south(cellx,celly) and maze:contains_cell(cellx,celly+1) then
                    if ((xb > ox and yb > oy) and
                            enigma.GetKind(enigma.GetFloor(xb, yb+1)) == "fl-water") then
                        if ( enigma.GetAttrib(enigma.GetFloor(xb, yb+1), "_white_shortcut_forbidden")
                            or (not difficult) or (math.random() > threshold)) then
                            create_tile(tiles, xb, yb+1, "maze_wall_white")
                        else
                            create_tile(tiles, xb, yb+1, " ")
                        end
                    end
                    if ((xb <= ox or yb <= oy) and (math.random() < threshold_border)) then
                        create_tile(tiles, xb, yb+1, "maze_wall_white")
                    end
                    if ((xw >= 38 - ox or yw >= 24 - oy) and (math.random() < threshold_border)) then
                        create_tile(tiles, xw, yw+1, "maze_wall_black")
                    end
                end

                if maze:contains_cell(cellx+1,celly+1) then
                    create_tile(tiles, xw+1, yw+1, "maze_wall")
                    create_tile(tiles, xb+1, yb+1, "maze_wall")
                end
            end )
end

render_dual_maze()

oxyd_shuffle()
display.SetFollowMode(display.FOLLOW_SMOOTH)

    ]]></el:luamain>
    <el:i18n>
      <el:string el:key="title">
        <el:english el:translate="false"/>
      </el:string>
      <el:string el:key="subtitle">
        <el:english el:translate="true"/>
        <el:translation el:lang="de">Abstand bewahren!</el:translation>
      </el:string>
      <el:string el:key="forest">
        <el:english el:translate="true">Help! I can't see the forest for the trees!</el:english>
        <el:translation el:lang="de">Hilfe! Ich kann den Wald vor lauter BÃ¤umen nicht sehen!</el:translation>
      </el:string>
    </el:i18n>
  </el:protected>
</el:level>


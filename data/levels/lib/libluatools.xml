<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<el:level xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://enigma-game.org/schema/level/1 level.xsd" xmlns:el="http://enigma-game.org/schema/level/1">
  <el:protected>
    <el:info el:type="library">
      <el:identity el:title="" el:id="lib/libluatools"/>
      <el:version el:score="1" el:release="1" el:revision="3" el:status="released"/>
      <el:author  el:name="Enigma Team" el:email="" el:homepage=""/>
      <el:copyright>Copyright Â© 2007, 2008 Enigma Team</el:copyright>
      <el:license el:type="GPL v2.0 or above" el:open="true"/>
      <el:compatibility el:enigma="1.00">
      </el:compatibility>
      <el:modes el:easy="false" el:single="false" el:network="false"/>
      <el:comments>
      </el:comments>
      <el:score el:easy="-" el:difficult="-"/>
    </el:info>
    <el:luamain><![CDATA[

---------------------------------------------------------------------
-- libluatools holds some general utilities for working with Lua.
-- It includes functions for deep-copying tables, combining tables,
-- and shuffling tables, a function to calculate Manhattan
-- distances and a wrapper for Lua's modulo-function, which has
-- been renamed from math.mod to math.fmod.
---------------------------------------------------------------------

luatools = {}

---------------------------------------------------------------------
--  TABLE  HANDLING
---------------------------------------------------------------------

-- deep_copy returns a copy of SOURCE, where table entries are
-- not copied as memory references, but complete ("deep copy").
-- Metatables are transfered, but not deep-copied.
-- TODO: use rawset/rawget instead.
function luatools.deep_copy(source)
 if type(source) ~= "table" then
   return source
 end
 local dest = {}
 for k, v in pairs(source) do
   if type(source[k]) == "table" then
     dest[k] = luatools.deep_copy(source[k])
   else
     dest[k] = source[k]
   end
 end
 setmetatable(dest, getmetatable(source))
 return dest
end 

-- combine_tables returns a table consisting of all entries of the
-- entries of OVER_TABLE: OVER_TABLE is a table of tables, say
-- {T1, T2, T3, ...}. The result of combine_tables will be a new
-- table with all entries of T1, T2, T3 etc., with the first table
-- having highest priority etc.
function luatools.combine_tables(arg1, ...)
  local args = {arg1, ...}
  if table.getn(args) == 1 then
    args = arg1
  end
  if type(args) ~= "table" then
    error("combine_tables: None or only one argument, and it's not a table!")
  end
  local result = {}
  for j,t in pairs(args) do
    if type(t) ~= "table" then
      error("combine_tables: Main table does not consist of tables alone!")
    end
    for k,v in pairs(t) do
      result[k] = result[k] or luatools.deep_copy(v)
    end
  end
  return result
end

-- shuffle_table resorts the table T randomly. Note that only those entries
-- of T can be sorted, that are indexed with integers from 1 to table.getn(T).
-- No return value, the table itself is shuffled.
function luatools.shuffle_table(t)
  if table.getn(t) < 2 then
    return
  end
  for n = table.getn(t), 2, -1 do
    local m = math.random(n)
    t[n], t[m] = t[m], t[n]
  end
end

-- print_table uses the print command to print all
-- entries of a table, one table per line.
-- It should be used for debug reasons only.
-- PREFIX can be a string to be put in front of each
-- line of the output, in case you need to distinguish
-- several outputs from each other.
-- print_table is recursive, i.e. a table with table
-- as entries will call print_table again. To avoid
-- infinite loops, DEPTH is used as additional argument.
-- Don't use it in levels. If you want to suppress
-- the recursive function, use DEPTH = -1.
function luatools.print_table(t, prefix, depth)
  if type(t) ~= "table" then
    print("print_table: Argument is of type "..type(t)..", not table.")
    return
  end
  for key, value in pairs(t) do
    local key_s
    if type(key) == "string" then
      key_s = "\"" .. key .. "\""
    elseif type(key) == "number" then
      key_s = key
    else
      key_s = "<" .. type(key) .. ">"
    end
    if type(value) == "number" then
      print((prefix or "") .. "|" .. key_s .. " = " .. value)
    elseif type(value) == "string" then
      print((prefix or "").. "|" .. key_s .. " = \"" .. value .. "\"")
    elseif type(value) == "table" then
      if (depth or 0) < 5 then
        print((prefix or "") .. "|" .. key_s .. " = |")
        luatools.print_table(value,
            (prefix or "") .. "|" .. string.rep(" ", string.len(key_s) + 3),
            (depth or 0) + 1)
        print((prefix or "") .. "|")
      else
        print((prefix or "") .. "|" .. key_s .. " = | ...")
      end
    else
      print((prefix or "").. "|" .. key_s .. " of type " .. type(value))
    end
  end
end

---------------------------------------------------------------------
--  ADVANCED  POSITION  HANDLING  AND  CALCULATIONS
---------------------------------------------------------------------

-- manhattan_distance calculates the Manhattan-distance between
-- (X1,Y1) and (X2, Y2), which is |X1 - X2| + |Y1 - Y2|.
-- If X2 and Y2 are nil, X1 and Y1 are assumed to be positions
-- instead of coordinates.
function luatools.manhattan_distance(x1, y1, x2, y2)
  if x1 and y1 and x2 and y2 then
    -- x1, y1, x2, y2 are coordinates
    return math.abs(x1 - x2) + math.abs(y1 - y2)
  end
  if x1 and y1 then
    -- x1 and y1 are positions, possibly tables.
    local p1 = x1
    local p2 = y1
    if type(p1) == "table" then
      p1 = po(p1)
    end
    if type(p2) == "table" then
      p2 = po(p2)
    end
    return math.abs(p1.x - p2.x) + math.abs(p1.y - p2.y)
  end
  error("manhattan_distance: Too less arguments.")  
end

---------------------------------------------------------------------
--  MATHEMATICAL  FUNCTIONS
---------------------------------------------------------------------

-- As Lua uses different names for the modulo-function in its
-- versions, it's sometimes better to wrap them.
-- Even worse, lua's modulo function doesn't handle negative
-- values as it should. The following function returns (given
-- an integer) another integer between 0 and MODUL-1.
function luatools.mod(value, modul)
  if (type(value) ~= "number") or (type(modul) ~= "number") then
    error("luatools.mod: Arguments are not two numbers.")
  end
  if modul <= 0 then
    error("luatools.mod: Second argument (modul) must be positive.")
  end
  if value < 0 then
    -- No, the following call to luatools.mod is not a real
    -- recursion, it's only for the case where VALUE is a
    -- negative multiple of MODUL (otherwise we would get
    -- MODUL as result, not zero).
    return luatools.mod(modul + (math.fmod or math.mod)(value, modul), modul)
  else
    return (math.fmod or math.mod)(value, modul)
  end
end

-- A wrapper of "if" to resemble the ternary ?:-function.
-- Note that this function evaluates both IFTRUE as well as IFFALSE, e.g.
--   luatools.cond(t == 0, 1/t, error("Division by zero"))
-- will evaluate the error-function and thus halt for any T.
-- Hence: Make sure there are no sideeffects in IFTRUE and IFFALSE!
function luatools.cond(condition, iftrue, iffalse)
  if condition then
    return iftrue
  else
    return iffalse
  end
end

-- digits returns a table whose elements are the digits of NUMBER
-- in base BASE. BASE can be a number (e.g. 3 to get ternary)
-- as well as a table (then the table entries with numerical
-- keys will be used as digits).
-- Examples:
--   luatools.digits(13, 2) = {1, 0, 1, 1}
--   luatools.digits(15, 16) = {15}
--   luatools.digits(17, 3) = {2, 2, 1}
--   luatools.digits(17, {2, "b", 5}) = {5, 5, "b"}
-- Hexadecimal would be:
--   luatools.digits(x, {0,1,2,3,4,5,6,7,8,9,"A","B","C","D","E","F"})
-- NUMBER is supposed to be a non-negative integer.
function luatools.digits(number, base)
  -- Check arguments and calculate fullbase and exponent
  if type(number) ~= "number" then
    error("digits: First argument not a number ("..type(number).." instead).")
  end
  if (type(base) ~= "number") and (type(base) ~= "table") then
    error("digits: Second argument not valid type ("..type(base)..").")
  end
  if (number < 0) or (number ~= math.ceil(number)) then
    error("digits: First argument out of range ("..number..").")
  end
  local fullbase = {}
  local exponent = 0
  if type(base) == "number" then
    if (base < 2) or (base ~= math.ceil(base)) then
      error("digits: Second argument out of range ("..base..").")
    end
    for j = 1, base do
      table.insert(fullbase, j - 1)
    end
  else -- type(base) == "table"
    if table.getn(base) < 2 then
      error("digits: Second argument has not enough elements.")
    end
    fullbase = base
  end
  exponent = table.getn(fullbase)
  -- Decompose NUMBER
  local remains = number
  local result = {}
  while remains > 0 do
    local d = luatools.mod(remains, exponent)
    table.insert(result, fullbase[d + 1])
    remains = (remains - d) / exponent
    if remains ~= math.ceil(remains) then
      error("digits: Internal error during calculation (remains = "..remains..").")
    end
  end
  return result
end

-- Return a table of all combinations of DEPTH entries,
-- each of which is chosen from DIGITS.
-- Example: luatools.combinations(3, {7, 8, "a"}) will return
--   { {7,7,7}, {7,7,8}, {7,7,"a"}, {7,8,7}, {7,8,8}, {7,8,"a"},
--     {7,"a",7}, {7,"a",8}, {7,"a","a"}, {8,7,7}, ... }
-- Mathematically, it builds the leafs of an #DIGITS-ary tree
-- of depth DEPTH.
function luatools.combinations(depth, digits)
  local all_combinations = {{}}
  local digs = digits
  if (type(depth) ~= "number") or (depth < 1) or (depth ~= math.floor(depth)) then
    error("combinations: First argument (depth) not a number or out of range.")
  end
  if type(digits) == "number" then
    if (digits < 1) or (digits ~= math.floor(digits)) then
      error("combinations: Second argument (digits) out of range.")
    end
    digs = {}
    for j = 1, digits do
      digs[j] = j
    end
  end
  if type(digs) ~= "table" then
    error("combinations: Second argument (digits) should be number or table.")
  end
  for _ = 1, depth do
    local next_step = {}
    for _, old_combination in pairs(all_combinations) do
      for _, new_digit in pairs(digs) do
        local new_combination = luatools.deep_copy(old_combination)
        table.insert(new_combination, new_digit)
        table.insert(next, new_combination)
      end
    end
    all_combinations = next_step
  end
  return all_combinations
end

-- cubic_polynomial returns the result of the
-- following polynomial with coefficients in A:
-- a[10]*y*y*y + a[9]*x*y*y + a[8]*x*x*y + a[7]*x*x*x
--   + a[6]*y*y + a[5]*x*y + a[4]*x*x + a[3]*y + a[2]*x + a[1]
-- You can use luatools.random_vector(10, ...) and
-- a modulo operation to easily form a random
-- pattern of a floor, or choose the coefficients
-- to your own liking. Entries in A which are not
-- numbers are considered zero.
function luatools.cubic_polynomial(a, x, y)
  if type(a) ~= "table" then
    error("cubic_polynomial: First argument not a table (" .. type(a)
          .. " instead).")
  end
  if (type(x) ~= "number") or (type(y) ~= "number") then
    error("cubic_polynomial: Second or third argument not a number.")
  end
  return   (a[10] or 0)*y*y*y + (a[9] or 0)*x*y*y + (a[8] or 0)*x*x*y
         + (a[7] or 0)*x*x*x + (a[6] or 0)*y*y + (a[5] or 0)*x*y
         + (a[4] or 0)*x*x + (a[3] or 0)*y + (a[2] or 0)*x + (a[1] or 0)
end

---------------------------------------------------------------------
--  PERMUTATIONS  AND  RANDOM  NUMBERS
---------------------------------------------------------------------

-- Return a random permutation of n elements.
-- This function outputs a table with integer entries between
-- 1 and n at positions 1 to n.
function luatools.permutation(n)
  if type(n) ~= "number" then
    error("permutation: Expected number, got "..type(n).."!")
  end
  if (n < 1) or (n ~= math.floor(n)) then
    error("permutation: Argument must be positive integer.")
  end
  local sequence = {}
  for j = 1, n do
    table.insert(sequence, j)
  end
  luatools.shuffle_table(sequence)
  return sequence
end

-- Return a random cyclic permutation (i.e. with only one cycle) of n elements.
function luatools.cyclic_permutation(n)  
  if type(n) ~= "number" then
    error("cyclic_permutation: Expected number, got "..type(n).."!")
  end
  local sequence1 = luatools.permutation(n)
  local sequence2 = {}
  for j = 1, n - 1 do
    sequence2[sequence1[j]] = sequence1[j+1]
  end
  sequence2[sequence1[n]] = sequence1[1]
  return sequence2
end

-- Return a table with NUMBER random entries.
-- Additional arguments like with math.random.
function luatools.random_vector(number, ...)
  if type(number) ~= "number" then
    error("random_vector: First argument not a number ("..type(number).." instead).")
  end
  if (number < 0) or (number ~= math.ceil(number)) then
    error("random_vector: First argument out of range ("..number..").")
  end
  local result = {}
  for j = 1, number do
    result[j] = math.random(...)
  end
  return result
end

    ]]></el:luamain>
    <el:i18n>
    </el:i18n>
  </el:protected>
</el:level>

